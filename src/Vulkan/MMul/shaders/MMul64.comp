#version 450
#extension GL_ARB_gpu_shader_int64 : enable

layout(local_size_x_id = 100, local_size_y_id = 101, local_size_z_id = 102) in;

layout(set = 0, binding = 0) readonly buffer MatA {
    float data[];
} matrix_a;

layout(set = 0, binding = 1) readonly buffer MatB {
    float data[];
} matrix_b;

layout(set = 0, binding = 2) writeonly buffer MatOut {
    float data[];
} matrix_out;

layout(push_constant) uniform PushConstants {
    uint k; // matrix_a's number of columns and matrix_b's number of rows
    uint m; // matrix_c's number of rows
    uint n; // matrix_c's number of columns 
};

void main() {
    uint64_t x = gl_GlobalInvocationID.x;
    uint64_t y = gl_GlobalInvocationID.y;

    float result = 0.0;
    for (uint64_t i = 0; i < k; ++i) {
        result += matrix_a.data[uint(y * k + i)] * matrix_b.data[uint(x + i * n)];
    }
    matrix_out.data[uint(y * n + x)] = result;
}